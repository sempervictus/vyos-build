commit 36748cdfa67236318f89fbe94d864fd088361c15
Author: RageLtMan <rageltman [at] sempervictus>
Date:   Tue Jan 12 02:33:42 2021 -0500

    RANDKSTACK: Import from PhotonOS 5.10 branch

diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index cad08703c4ad..de2b16af00f4 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -54,6 +54,15 @@ SYM_CODE_START(native_usergs_sysret64)
 SYM_CODE_END(native_usergs_sysret64)
 #endif /* CONFIG_PARAVIRT_XXL */
 
+#ifdef CONFIG_PAX_RANDKSTACK
+.macro PAX_RAND_KSTACK
+	movq	%rsp, %rdi
+	call	pax_randomize_kstack
+	movq	%rsp, %rdi
+	movq	%rax, %rsp
+.endm
+#endif
+
 /*
  * 64-bit SYSCALL instruction entry. Up to 6 arguments in registers.
  *
@@ -115,9 +124,28 @@ SYM_INNER_LABEL(entry_SYSCALL_64_after_hwframe, SYM_L_GLOBAL)
 	PUSH_AND_CLEAR_REGS rax=$-ENOSYS
 
 	/* IRQs are off. */
+
+	/*
+	 * do_syscall_64 expects syscall-nr (pt_regs->orig_ax) as the first
+	 * argument (%rdi) and pointer to pt_regs as the second argument (%rsi).
+	 */
+#ifdef CONFIG_PAX_RANDKSTACK
+	pushq	%rax
+	movq	%rsp, %rdi
+	call	pax_randomize_kstack
+	popq	%rdi
+	movq	%rsp, %rsi
+	movq	%rax, %rsp
+
+	pushq	%rsi
+#else
 	movq	%rax, %rdi
 	movq	%rsp, %rsi
+#endif
 	call	do_syscall_64		/* returns with IRQs disabled */
+#ifdef CONFIG_PAX_RANDKSTACK
+	popq	%rsp
+#endif
 
 	/*
 	 * Try to use SYSRET instead of IRET if we're returning to
@@ -285,8 +313,16 @@ SYM_CODE_START(ret_from_fork)
 
 2:
 	UNWIND_HINT_REGS
+#ifdef CONFIG_PAX_RANDKSTACK
+	PAX_RAND_KSTACK
+	pushq	%rdi
+#else
 	movq	%rsp, %rdi
+#endif
 	call	syscall_exit_to_user_mode	/* returns with IRQs disabled */
+#ifdef CONFIG_PAX_RANDKSTACK
+	popq	%rsp
+#endif
 	jmp	swapgs_restore_regs_and_return_to_usermode
 
 1:
diff --git a/arch/x86/kernel/process_64.c b/arch/x86/kernel/process_64.c
index df342bedea88..dd48673b23b3 100644
--- a/arch/x86/kernel/process_64.c
+++ b/arch/x86/kernel/process_64.c
@@ -61,6 +61,21 @@
 
 #include "process.h"
 
+#ifdef CONFIG_PAX_RANDKSTACK
+unsigned long pax_randomize_kstack(struct pt_regs *regs)
+{
+	unsigned long time;
+	unsigned long sp1;
+
+	if (!randomize_va_space)
+		return (unsigned long)regs;
+
+	time = rdtsc() & 0xFUL;
+	sp1 = (unsigned long)regs - (time << 4);
+	return sp1;
+}
+#endif
+
 /* Prints also some state that isn't saved in the pt_regs */
 void __show_regs(struct pt_regs *regs, enum show_regs_mode mode,
 		 const char *log_lvl)
diff --git a/security/Kconfig b/security/Kconfig
index eea21440ab24..f2fa83bffc7e 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -5,6 +5,20 @@
 
 menu "Security options"
 
+config PAX_RANDKSTACK
+	bool "Randomize kernel stack base"
+	depends on X86_TSC && X86
+	help
+	  By saying Y here the kernel will randomize every task's kernel
+	  stack on every system call.  This will not only force an attacker
+	  to guess it but also prevent him from making use of possible
+	  leaked information about it.
+
+	  Since the kernel stack is a rather scarce resource, randomization
+	  may cause unexpected stack overflows, therefore you should very
+	  carefully test your system.  Note that once enabled in the kernel
+	  configuration, this feature cannot be disabled on a per file basis.
+
 source "security/keys/Kconfig"
 
 config SECURITY_DMESG_RESTRICT
